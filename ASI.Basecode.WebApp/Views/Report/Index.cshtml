@using ASI.Basecode.Data.Models.CustomModels;
@model ASI.Basecode.Data.Models.CustomModels.TicketSummaryModel;
@using Newtonsoft.Json;

@{
    string totalCategoriesJson = "none";
    string totalStatusesJson = "none";
    string totalPrioritiesJson = "none";
    var categoriesJson = "none";
    var statusesJson = "none";
    var prioritiesJson = "none";
    if (User.FindFirst("UserRole")?.Value == "administrator" || User.FindFirst("UserRole")?.Value == "superadmin")
    {
        totalCategoriesJson = JsonConvert.SerializeObject(Model.TicketSummaryWithCategory);
        totalStatusesJson = JsonConvert.SerializeObject(Model.TicketSummaryWithStatus);
        totalPrioritiesJson = JsonConvert.SerializeObject(Model.TicketSummaryWithPriority);
    }
    else if (User.FindFirst("UserRole")?.Value == "support agent")
    {
        categoriesJson = JsonConvert.SerializeObject(Model.TicketsByCategory);
        statusesJson = JsonConvert.SerializeObject(Model.TicketsByStatus);
        prioritiesJson = JsonConvert.SerializeObject(Model.TicketsByPriority);
    }
    
    
    // var userActivitiesJson = JsonConvert.SerializeObject(Model.UserActivities);
}

<div style="width: 100%; padding-bottom: 20px;" class="d-flex justify-content-center align-items-center">
    <strong class="text-align-center" style="font-size: 30px;">Ticket Summary</strong>
</div>
<div class="row row-cols-xxxl-4 row-cols-lg-4 row-cols-sm-2 row-cols-1 gy-4">

    <!-- Ticket Category Start  -->
    <div class="col-md-6">
        <div class="card h-100 p-0">
            <div class="card-header border-bottom bg-base py-16 px-24">
                <h6 class="text-lg fw-semibold mb-0">Ticket Category</h6>
            </div>
            <div class="card-body p-24 text-center chart-container">
                <div id="pieChartCategory"></div>
            </div>
        </div>
    </div>

    <!-- Ticket Status Start  -->
    <div class="col-md-6">
        <div class="card h-100 p-0">
            <div class="card-header border-bottom bg-base py-16 px-24">
                <h6 class="text-lg fw-semibold mb-0">Ticket Status</h6>
            </div>
            <div class="card-body p-24 text-center chart-container">
                <div id="pieChartStatus"></div>
            </div>
        </div>
    </div>

    <!-- Ticket Priority Start -->
    <div class="col-md-6">
        <div class="card h-100 p-0">
            <div class="card-header border-bottom bg-base py-16 px-24">
                <h6 class="text-lg fw-semibold mb-0">Ticket Priority</h6>
            </div>
            <div class="card-body p-24 text-center chart-container">
                <div id="pieChartPriority"></div>
            </div>
        </div>
    </div>

    <!-- Ticket User Activity Start -->
    <div class="col-md-6">
        <div class="card h-100 p-0">
            <div class="card-header border-bottom bg-base py-16 px-24">
                <h6 class="text-lg fw-semibold mb-0">Ticket User Activity</h6>
            </div>
            <div class="card-body p-24 text-center chart-container">
                <div id="pieChartActivity"></div>
            </div>
        </div>
    </div>

</div>

<script type="text/javascript">
    // Pass the user role to JavaScript
    var userRole = '@User.FindFirst("UserRole")?.Value';

    // Now, you can pass the chart data from the server-side model
    if (userRole === "administrator" || userRole === "superadmin") {
        var totalCategories = @Html.Raw(totalCategoriesJson);
        var totalStatuses = @Html.Raw(totalStatusesJson);

        var totalPriorities = @Html.Raw(totalPrioritiesJson);
        console.log(totalPriorities)

    }
    else if (userRole === "support agent") {
        var categories = @Html.Raw(categoriesJson);
        var statuses = @Html.Raw(statusesJson);
        var priorities = @Html.Raw(prioritiesJson);
    }

    document.addEventListener('DOMContentLoaded', function () {
        if (userRole === "administrator" || userRole === "superadmin") {
            renderChart('pieChartCategory', totalCategories.map(c => c.TotalCount), totalCategories.map(c => c.CategoryName));
            renderChart('pieChartStatus', totalStatuses.map(s => s.TotalCount), totalStatuses.map(s => s.StatusName));
            renderChart('pieChartPriority', totalPriorities.map(p => p.TotalCount), totalPriorities.map(p => p.PriorityName));
        }
        else if (userRole === "support agent") {
            renderChart('pieChartCategory', categories.map(c => c.TicketsByCategory), categories.map(c => c.CategoryName));
            renderChart('pieChartStatus', statuses.map(s => s.TicketByStatus), statuses.map(s => s.StatusName));
            renderChart('pieChartPriority', priorities.map(p => p.TicketByPriority), priorities.map(p => p.PriorityName));
        }
        // Optionally render user activity chart if needed
        // renderChart('pieChartUserActivity', userActivities.map(u => u.TicketCount), userActivities.map(u => u.UserName));
    });

    function renderChart(elementId, seriesData, labels) {
        console.log(seriesData)
        var options = {
            series: seriesData,
            chart: { type: 'pie', height: 264 },
            labels: labels,
            legend: { position: 'bottom', horizontalAlign: 'center' },
            colors: ['#487FFF', '#FF9F29', '#45B369', '#EF4A00'],
            responsive: [{
                breakpoint: 480,
                options: {
                    chart: { width: 200 },
                    legend: { show: false }
                }
            }]
        };

        var id = elementId;
        console.log(id)
        var chart = new ApexCharts(document.getElementById(id), options);
        chart.render();
    }
</script>

